{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "ison",
	"scopeName": "source.ison",
	"patterns": [
		{ "include": "#dict" },
		{ "include": "#comment" }
	],
	"repository": {
		"dict": {
			"begin": "\\{",
			"beginCaptures": {
				"0": { "name": "punctuation.definition.dictionary.begin.ison" }
			},
			"comment": "an ison dict",
			"end": "\\}",
			"endCaptures": {
				"0": { "name": "punctuation.definition.dictionary.end.ison" }
			},
			"name": "meta.structure.dictionary.ison",
			"patterns": [
				{ 
					"name": "meta.structure.dictionary.element.stringkey",
					"begin": "\"(?=[^\"]*\"\\s*:)",
					"end": "\"",
					"patterns": [
						{ "include": "#isonstring" },
						{ "include": "#stringkey"},
						{
							"name": "invalid.illegal",
							"match": "[^a-zA-Z0-9_\\-*!?#@]+"
						}
					]
				},
				{
					"name": "meta.structure.dictionary.element.key",
					"begin": "(?=[a-zA-Z_][a-zA-Z_0-9]*\\s*:)",
					"end": "(?=:)",
					"patterns": [
						{ "include": "#key"},
						{
							"name": "invalid.illegal",
							"match": "[^a-zA-Z0-9_]+"
						}
					]
				},
				{
					"name": "meta.structure.dictionary.element.value",
					"begin": ":",
					"beginCaptures": { "0": {"name": "punctuation.separator.dictionary.value.begin.ison" }},
					"end": "(,)|(?=\\})",
					"endCaptures": { "1": {"name": "punctuation.separator.dictionary.value.end.ison" }},
					"patterns": [
						{ "include": "#dict" },
						{ "include": "#array" },
						{ "include": "#valuestring" },
						{ "include": "#valuenumber" },
						{ "include": "#valuekeyword" },
						{ "include": "#comment" }
					]
				},
				{
					"name": "invalid.illegal",
					"begin": "\"[^\"]*\"\\s*[^:]+",
					"end": ",|(?=\\})"
				},
				{ "include": "#comment" }
			]
		},
		"array": {
			"name": "meta.structure.list.ison",
			"comment": "an ison list",
			"begin": "\\[",
			"beginCaptures": {
				"0": { "name": "punctuation.definition.list.begin.ison" }
			},
			"end": "\\]",
			"endCaptures": {
				"0": { "name": "punctuation.definition.list.end.ison" }
			},
			"patterns": [
				{ 
					"name": "meta.structure.list.element.value",
					"begin": "(?=[\\{\\[+\\-0-9\"ftn])",
					"end": "(,)|(?=\\])",
					"endCaptures": { "1": {"name": "punctuation.separator.list.element.ison"}},
					"patterns": [
						{ "include": "#dict" },
						{ "include": "#array" },
						{ "include": "#valuestring" },
						{ "include": "#valuenumber" },
						{ "include": "#valuekeyword" },
						{ "include": "#comment" }
					]
				},
				{
					"name": "invalid.illegal",
					"match": "[^\\{\\[+\\-0-9\"/]"
				},
				{ "include": "#comment" }
			]
		},
		"varpath": {
			"patterns": [
				{
					"name": "meta.parameter.type.path.ison",
					"begin": "(?=[a-zA-Z0-9_/\\$%~\\-\\*\\x20@])",
					"end": "(?=,)|(?=\\})",
					"patterns": [
						{ "include": "#varname" },
						{ "include": "#varlambda" },
						{ "include": "#isonstring" },
						{
							"name": "keyword.control.select.ison",
							"match": ":"
						},
						{
							"name": "invalid.illegal",
							"match": "[^a-zA-Z0-9/\\x20:@]+"
						}
					]
				},
				{
					"name": "keyword.control.defer.ison",
					"match": "\\^"
				},
				{
					"name": "keyword.control.unroll.ison",
					"match": "\\*"
				},
				{
					"name": "invalid.illegal",
					"match": "[^a-zA-Z0-9/\\$\\^\\*\"]+"
				}
			]	
		},
		"lambda-arg": {
			"patterns": [
				{
					"name": "meta.parameter.type.lambda-arg.ison",
					"begin": ",",
					"end": "(?=,)|(?=\\})",
					"patterns": [
						{ "include": "#lambda-arg-key-value" },
						{ "include": "#isonstring" },
						{
							"name": "invalid.illegal",
							"match": "\""
						}
					]
				}
			]
		},
		"lambda-arg-key-value": {
			"patterns": [
				{
					"name": "meta.parameter.type.lambda-arg.kv.ison",
					"begin": "([a-zA-Z0-9_]+=)",
					"end": "(?=,)|(?=\\})",
					"patterns": [
						{ "include": "#isonstring" }
					]
				}
			]
		},

		"varname": {
			"name": "variable.other.ison",
			"match": "([a-zA-Z0-9/\\x20_.@\\-\\*]+)"
		},
		"varlambda": {
			"name": "keyword.control.lambdavar.ison",
			"match": "%~?(([a-zA-Z_][a-zA-Z0-9_\\-.]*(:\\d+)?%)|(\\d+))"
		},
		"stringkey": {
			"name": "support.type.property-name.ison",
			"match": "([^\"]+)"
		},
		"key": {
			"name": "support.type.property-name.ison",
			"match": "([a-zA-Z0-9_]+)"
		},
		"literal-string": {
			"name": "support.type.literal-string.ison",
			"match": "\\`(.*)\\`"
		},
		"isonstring": {
			"patterns": [
				{
					"name": "storage.type.function.ison",
					"begin": "\\$(?!(py|\\*|S)\\{)([a-zA-Z0-9_\\-\\*!?.]*)\\{",
					"beginCaptures": { "2": {"name": "entity.name.function.ison"}},
					"end": "\\}",
					"endCaptures": {},
					"patterns": [
						{ "include": "#literal-string" },
						{ "include": "#lambda-arg" },
						{ "include": "#varpath" }
					]
				},
				{ "include": "#funcpy"},
				{ "include": "#func-tostruct"},
				{ "include": "#func-string"},
				{ "include": "#ison-var"}
			]
		},
		"ison-var": {
			"name": "variable.other.ison",
			"match": "\\$([a-zA-Z0-9_]+)(?=[^a-zA-Z0-9_\\{]*)"
		},
		"func-string": {
			"name": "storage.type.function.string.ison",
			"begin": "\\$(S)\\{",
			"beginCaptures": { "1": {"name": "entity.name.function.string.ison"}},
			"end": "\\}",
			"patterns": [
				{ "include": "#func-string-code" }
			]
		},
		"func-string-code": {
			"patterns": [
				{
					"name": "string.quoted.double.ison",
					"match": "[^\"\\{\\}$\\\\]"
				},
				{
					"name": "constant.character.escape.ison",
					"match": "\\\\."
				},
				{
					"name": "string.quoted.double.ison",
					"begin": "\\{",
					"end": "\\}",
					"patterns": [
						{ "include": "#func-string-code" }
					]
				},
				{ "include": "#isonstring" },
				{
					"name": "invalid.illegal",
					"match": "\""
				}
			]
		},
		"func-tostruct": {
			"name": "storage.type.function.tostruct.ison",
			"begin": "\\$(\\*)\\{",
			"beginCaptures": { "1": {"name": "entity.name.function.to-struct.ison"}},
			"end": "\\}",
			"patterns": [
				{ "include": "#func-tostruct-code" }
			]
		},
		"func-tostruct-code": {
			"patterns": [
				{
					"name": "keyword.control.embedded-struct.ison",
					"match": "[^\\{\\}$]"
				},
				{
					"name": "keyword.control.embedded-struct.ison",
					"begin": "\\{",
					"end": "\\}",
					"patterns": [
						{ "include": "#func-tostruct-code" }
					]
				},
				{ "include": "#isonstring" }
			]
		},
		"funcpy": {
			"name": "storage.type.function.py.ison",
			"begin": "\\$(py)\\{",
			"beginCaptures": { "1": {"name": "entity.name.function.py.ison"}},
			"end": "\\}",
			"patterns": [
				{ "include": "#funcpycode" }
			]
		},
		"funcpycode": {
			"patterns": [
				{
					"name": "keyword.control.embedded-python.ison",
					"match": "[^\\{\\}$]"
				},
				{
					"name": "keyword.control.embedded-python.ison",
					"begin": "\\{",
					"end": "\\}",
					"patterns": [
						{ "include": "#funcpycode" }
					]
				},
				{ "include": "#isonstring" }
			]
		},
		"valuestring": {
			"name": "string.quoted.double.ison",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.ison",
					"match": "\\\\."
				},
				{ "include": "#isonstring" },
				{ "include": "#varlambda" }
			]
		},
		"valuekeyword": {
			"patterns": [
				{
					"name": "constant.language.true.ison",
					"match": "\\btrue\\b"
				},
				{
					"name": "constant.language.false.ison",
					"match": "\\bfalse\\b"
				},
				{
					"name": "constant.language.null.ison",
					"match": "\\bnull\\b"
				}		
			]
		},
		"valuenumber": {
			"patterns": [
				{
					"name": "constant.numeric.integer.ison",
					"match": "\\-*[0-9]+"
				},
				{
					"name": "constant.numeric.float.ison",
					"match": "[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)(e[+-]?[0-9])?"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"begin": "//",
					"beginCaptures": { "0": { "name": "punctuation.definition.comment.ison" }},
					"end": "$",
					"patterns": [
						{
							"name": "comment.line.double-slash.ison",
							"match": ".*?$"		
						}	
					]
				},
				{
					"name": "comment.block",
					"begin": "/\\*",
					"beginCaptures": { "0": {"name": "punctuation.definition.comment.begin.ison"}},
					"end": "\\*/",
					"endCaptures": { "0": {"name": "punctuation.definition.comment.end.ison"}},
					"patterns": [
						{
							"name": "comment.block.ison",
							"match": ".(?!\\*/)"
						}
					]
				}
			]
		}
	}
}